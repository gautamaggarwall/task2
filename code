#Set seeds for reproducibility
import random
random.seed(0)

import numpy as np
np.random.seed(0)

import tensorflow as tf
tf.random.set_seed(0)


import os
import json
from zipfile import ZipFile
from PIL import Image

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers, models

!pip install kaggle

kaggle_credentials=json.load(open("kaggle.json"))


#setup kaggle API as environment variables
os.environ['KAGGLE_USERNAME']= kaggle_credentials["username"]
os.environ["KAGGLE_KEY"]=kaggle_credentials["key"]


!kaggle datasets download -d abdallahalidev/plantvillage-dataset

!ls

#unzip the downloaded dataset
with ZipFile("plantvillage-dataset.zip","r") as zip_ref:
  zip_ref.extractall()

print(os.listdir("plantvillage dataset"))

print(len(os.listdir("plantvillage dataset/segmented")))
print(os.listdir("plantvillage dataset/segmented")[:5])

print(len(os.listdir("plantvillage dataset/color")))
print(os.listdir("plantvillage dataset/color")[:5])

print(len(os.listdir("plantvillage dataset/grayscale")))
print(os.listdir("plantvillage dataset/grayscale")[:5])


print(len(os.listdir("plantvillage dataset/color/Grape___healthy")))
print(os.listdir("plantvillage dataset/color/Grape___healthy")[:5])

#dataset path
base_dir='plantvillage dataset/color'



image_path ='/content/plantvillage dataset/color/Apple___Cedar_apple_rust/025b2b9a-0ec4-4132-96ac-7f2832d0db4a___FREC_C.Rust 3655.JPG'

img=mpimg.imread(image_path)

print(img.shape)
#Display the image
plt.imshow(img)
plt.axis('off') #turn off axis numbers
plt.show()

#image parameters
img_size=224
batch_size=32

#image data generators
data_gen=ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2

)

#train generator
train_generator=data_gen.flow_from_directory(
    base_dir,
    target_size=(img_size,img_size),
    batch_size=batch_size,
    subset='training',
    class_mode='categorical'


)

#validation generator
validation_generator=data_gen.flow_from_directory(
    base_dir,
    target_size=(img_size,img_size),
    batch_size=batch_size,
    subset='validation',
    class_mode='categorical'

)

#Model definition
model=models.Sequential()

model.add(layers.Conv2D(32,(3,3),activation='relu',input_shape=(img_size,img_size,3)))
model.add(layers.MaxPooling2D(2,2))

model.add(layers.Conv2D(64,(3,3),activation='relu'))
model.add(layers.MaxPooling2D(2,2))

model.add(layers.Flatten())
model.add(layers.Dense(256,activation='relu'))
model.add(layers.Dense(train_generator.num_classes,activation='softmax'))


#model summary
model.summary()

#Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

#training the model
history=model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples//batch_size,
    epochs=5,
    validation_data=validation_generator,
    validation_steps=validation_generator.samples//batch_size
)

#model evaluation
print('Evaluating model...')
val_loss,val_accuracy=model.evaluate(validation_generator,steps=validation_generator.samples//batch_size)
print(f'Validation Accuracy: (val_accuracy * 100:.2f)%')


#FUnction to load and preprocess the image using pillow
def load_and_preprocess_image(image_path,target_size=(224,224)):
  #load the image
  img=Image.open(image_path)
  #resize the image
  img=img.resize(target_size)
  #convert the image to numpy array
  img_array=np.array(img)
  #add batch dimension
  img_arraynp.expand-dims(img_array,axis=0)
  #scale the image values to [0,1]
  img_array=img_array.astype('float32')/255,
  return img_array

  #function to predict the class of an image
  def predict_image_class(model,image_path,class_indices):
    preprocessed_img=load_and_preprocess_image(image_path)
    predictions=model.predict(preprocesssed_img)
    predicted_clasS_index=np.argmax(predictions,axis=1)[0]
    predicted_class_name=class_indices[predicted_class_index]
    return predicted_class_name
#create a mapping from class indices to class
class_indices={v: k for k, v in train_generator.class_indices.items()}


class_indices

#saving the class name as json file
json.dump(class_indices,open('class_indices.json','w'))

#example usage
image_path='/content/test_apple_black_rot.JPG'
#image_path='/content/test_blueberry_healthy.jpg'
#image_path='content/test_potato_early_blight.jpg'
predicted_class_name=predict_image_class(model,image_path,class_indices)

#output the result
print("Predicted Class Name:",predicted_class_name)
